component proto2kins"Template for user-built kinematics";

description
"""
.if \\n[.g] .mso www.tmac

The userkins.comp file is a template for creating
kinematics that can be user-built using halcompile.

The unmodified userkins component can be used
as a kinematics file for a machine with identity
kinematics for an xyz machine employing 3 joints
(motors).

\\fBUSAGE:\\fR

  1) Copy the userkins.comp file to a user-owned
     directory (\\fBmydir\\fR).

     Note: The userkins.comp file can be downloaded from:
.URL https://github.com/LinuxCNC/linuxcnc/raw/2.8/src/hal/components/userkins.comp 
     where '2.8' is the branch name (use 'master' for
     the master branch)

     For a RIP (run-in-place) build, the file is located in
     the git tree as:
       src/hal/components/userkins.comp

  2) Edit the functions kinematicsForward() and
     kinematicsInverse() as required
  3) If required, add hal pins following examples in
     the template code
  4) Build and install the component using halcompile:
     $ cd \\fBmydir\\fR
     $ [sudo] halcompile --install userkins.comp
     # Note:
     #      sudo is required when using a deb install
     #      sudo is \\fBnot\\fR required for run-in-place builds
     # $ man halcompile for more info
  5) Specify userkins in an ini file as:
     \\fB[KINS]\\fR
     \\fBKINEMATICS=userkins\\fR
     \\fBJOINTS=3\\fR
     # the number of JOINTS must agree with the
     # number of joints used in your modified userkins.comp
  6) Note: the manpage for userkins is not updated by
     halcompile --install
  7) To use a different component name, rename the file
     (example mykins.comp) and change all instances of
     'userkins' to 'mykins'

""";
pin out bit dummy=1; // halcompile requires at least one pin
license "GPL";
;;

#include "rtapi.h"
#include "rtapi_math.h"
#include "rtapi_string.h"
#include "posemath.h"
#include "hal.h"
#include "kinematics.h"
#include "switchkins.h"

static struct hal_data {
 hal_float_t *d1, *d2, *d3, *d4, *d5, *d6,*r1;
 hal_u32_t *in;
 hal_u32_t *out;
 hal_bit_t  * iflag;
} *haldata;

#define D1 (*(haldata->d1))
#define D2 (*(haldata->d2))
#define D3 (*(haldata->d3))
#define D4 (*(haldata->d4))
#define D5 (*(haldata->d5))
#define D6 (*(haldata->d6))


#define DEFAULT_D1 490
#define DEFAULT_D2 0
#define DEFAULT_D3  50
#define DEFAULT_D4 0
#define DEFAULT_D5  50
#define DEFAULT_D6  50


static int proto2kins_setup(void) {
    int res=0;
    int comp_id;
    // this name must be different than the comp name:
    comp_id = hal_init("proto2kinsdata");

    haldata = hal_malloc(sizeof(*haldata));
    if (!haldata) goto error;

    res += hal_pin_float_newf(HAL_IN, &(haldata->d1), comp_id,"%s.D1","proto2kins");
    res += hal_pin_float_newf(HAL_IN, &(haldata->d2), comp_id,"%s.D2","proto2kins");
    res += hal_pin_float_newf(HAL_IN, &(haldata->d3), comp_id,"%s.D3","proto2kins");
    res += hal_pin_float_newf(HAL_IN, &(haldata->d4), comp_id,"%s.D4","proto2kins");
    res += hal_pin_float_newf(HAL_IN, &(haldata->d5), comp_id,"%s.D5","proto2kins");
    res += hal_pin_float_newf(HAL_IN, &(haldata->d6), comp_id,"%s.D6","proto2kins");
    res += hal_pin_bit_newf  (HAL_IN , &(haldata ->iflag), comp_id, "%s.iflag","proto2kins" );

    if (res) { goto error; }

    D1 = DEFAULT_D1;
    D2 = DEFAULT_D2;
    D3 = DEFAULT_D3;
    D4 = DEFAULT_D4;
    D5 = DEFAULT_D5;
    D6 = DEFAULT_D6;
    
    hal_ready(comp_id);
    return 0;

error:
    return -1;}

KINS_NOT_SWITCHABLE;

EXPORT_SYMBOL(kinematicsType);
EXPORT_SYMBOL(kinematicsInverse);
EXPORT_SYMBOL(kinematicsForward);

KINEMATICS_TYPE kinematicsType()
{
static bool is_setup=0;
    if (!is_setup) proto2kins_setup();
    return KINEMATICS_BOTH;
} // kinematicsType()

static bool is_homed=0;
int kinematicsForward(const double *joint,
                      EmcPose * world ,
                      const KINEMATICS_FORWARD_FLAGS * fflags,
                      KINEMATICS_INVERSE_FLAGS * iflags)
{
    double a0, a1,a2 ;
    double x, y, z;

/* convert joint angles to radians for sin() and cos() */

    a0 = joint[0] * ( PM_PI / 180 );
    a1 = joint[1] * ( PM_PI / 180 )*-1;
    a2 = joint[2];
/* convert angles into world coords */
    a1 = a1+ a0;
   

    x = D2*cos(a0) + D4*cos(a1) ;
    y = D2*sin(a0) + D4*sin(a1) ;

    *iflags = 1;
    //if (joint[1]*-1 > 90)
     //   *iflags = 1;

    world->tran.x = x;
    world->tran.y = y;
    world->tran.z =a2;

    return (0);
} // kinematicsForward()

int kinematicsInverse(const  EmcPose *world,
                       double *joint,
                      const KINEMATICS_INVERSE_FLAGS * iflags,
                      KINEMATICS_FORWARD_FLAGS * fflags)
{
    double a3;
    double q0, q1;
    double xt, yt, rsq, cc;
    double x, y, z;

    x = world->tran.x;
    y = world->tran.y;
    z = world->tran.z;

    /* horizontal distance (squared) from end effector centerline
        to main column centerline */
    rsq = x*x + y*y;
    /* joint 1 angle needed to make arm length match sqrt(rsq) */
    cc = (rsq - D2*D2 - D4*D4) / (2*D2*D4);
    if(cc < -1) cc = -1;
    if(cc > 1) cc = 1;
    q1 = acos(cc);

   // if (*iflags)
        //q1 = q1;
    if (*iflags)//(*(haldata -> iflag ))
        q1 = -q1;

    /* angle to end effector */
    q0 = atan2(y, x);

    /* end effector coords in inner arm coord system */
    xt = D2 + D4*cos(q1);
    yt = D4*sin(q1);

    /* inner arm angle */
    q0 = q0 - atan2(yt,xt);

    /* q0 and q1 are still in radians. convert them to degrees */
    q0 = q0 * (180 / PM_PI);
    q1 = q1 * (180 / PM_PI);

    joint[0] = q0;
    joint[1] = -q1;
    joint[2]= z;

    *fflags = 0;

    return (0);
} // kinematicsInverse()
